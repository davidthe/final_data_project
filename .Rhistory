packageDescription("stats")
help(package = "stats")
install.packages(c("vioplot", "MASS"))
source("https://bioconductor.org/biocLite.R")
Auto=read.table("lab-text", header=T)
dim(Auto)
head(Auto)
plot(cylinders , mpg)
plot(Auto$cylinders , Auto$mpg )
attach(Auto)
plot(cylinders , mpg)
plot(Auto$mpg, Auto$weight)
hist(Auto$mpg)
hist(Auto$ mpg ,col = "red") #col = 2
hist(Auto$ mpg ,col=2, breaks =15)
gender <- c("male", "female", "female", "male", "male", "male")
gender.f <- factor(gender)
gender.f
levels(gender.f)
Auto$cylinders = as.factor(Auto$ cylinders)
plot(Auto$cylinders , Auto$mpg)
plot(Auto$cylinders , Auto$mpg, col ="red ")
plot(Auto$cylinders , Auto$mpg, col ="red", horizontal =T)
plot(Auto$cylinders , Auto$mpg, col ="red", xlab="cylinders ", ylab="MPG",
main="Box plot of Miles per gallon per cylinder")
boxplot(mpg~cylinders,data=Auto, main="Car Milage Data", xlab="Number
of Cylinders", ylab="Miles Per Gallon", col ="red")
pairs(Auto)
pairs(~ mpg + displacement + horsepower + weight + acceleration ,
Auto)
pdf("Auto.pairs.pdf")
pairs(~ mpg + displacement + horsepower + weight + acceleration ,
Auto)
dev.off()
pairs(Auto)
View(Auto)
View(Auto[,1:8])
pairs(~ mpg + displacement + horsepower + weight + acceleration ,
+       Auto)
pairs(Auto)
Auto=read.table("lab-text", header=T)
dim(Auto)
Auto=read.table("lab-text", header=T)[,1:8]
View(Auto)
pairs(Auto)
View(Auto)
View(Auto)
plot(Auto$cylinders , Auto$mpg )
plot(Auto$mpg, Auto$weight)
hist(Auto$mpg)
hist(Auto$ mpg ,col = "red
)
c
dsada
hist(Auto$ mpg ,col = "red")
hist(Auto$ mpg ,col=2, breaks =15)
gender <- c("male", "female", "female", "male", "male", "male")
gender.f <- factor(gender)
plot(Auto$cylinders , Auto$mpg)
plot(Auto$cylinders , Auto$mpg, col ="red ")
plot(Auto$cylinders , Auto$mpg, col ="red", horizontal =T)
plot(Auto$cylinders , Auto$mpg, col ="red", horizontal =T)
plot(Auto$cylinders , Auto$mpg, col ="red", xlab="cylinders ", ylab="MPG",
main="Box plot of Miles per gallon per cylinder")
boxplot(mpg~cylinders,data=Auto, main="Car Milage Data", xlab="Number
of Cylinders", ylab="Miles Per Gallon", col ="red")
library(MASS)
install.packages("ISLR")
library(ISLR)
LoadLibraries()
LoadLibraries= function (){
+ library(ISLR) + library(MASS)
+ print("The libraries have been loaded .")
+ }
LoadLibraries= function (){
library(ISLR) + library(MASS)
print("The libraries have been loaded .")
}
LoadLibraries()
LoadLibraries()
View(Auto)
> LoadLibraries() [1]
LoadLibraries() [1]
LoadLibraries= function (){
library(ISLR) library(MASS)
print("The libraries have been loaded .")
}
LoadLibraries= function (){
library(ISLR)
library(MASS)
print("The libraries have been loaded .")
}
LoadLibraries() [1]
summary(lm.fit.result) –
summary(lm.fit.result)
summary(lm.fit.result)
lm
predict (lm.fit.result , data.frame(horsepower =(c(98, 140))), interval ="confidence")
library(MASS)
install.packages("ISLR")
install.packages("ISLR")
summary(lm.fit.result)
summary(lm.fit.result)
summary(lm.fit.result)
summary(lm.fit.result)
library(MASS)
library(ISLR)
install.packages("ISLR")
install.packages("ISLR")
library(ISLR)
library(ISLR)
library(ISLR)
summary(lm.fit.result)
lm.fit()
summary(lm.fit)
predict (lm.fit.result , data.frame(horsepower =(c(98, 140))), interval ="confidence")
predict (lm.fit , data.frame(horsepower =(c(98, 140))), interval ="confidence")
predict (lm.fit , data.frame(horsepower =(c(98, 140))), interval ="confidence")
names(lm.fit.result)
lm.fit.result = lm(y∼x,data)
lm.fit.result = lm(y∼x,data)
data
lm.fit.result=lm(y∼x,data)
lm()
lm.fit.result=lm(y∼x,data = Auto)
lm.fit.result  = lm(y~x, data)
data = Auto
summary(lm.fit.result)
lm.fit.result  = lm(y~x, data)
summary(Auto$mpg)
summary(Auto$horsepower)
lm(Auto$mpg~Auto$horsepower, Auto)
summary(lm(Auto$mpg~Auto$horsepower, Auto))
plot(lm(Auto$mpg~Auto$horsepower, Auto))
plot(lm(Auto$mpg~Auto$horsepower, Auto))
plot(lm(Auto$mpg~Auto$horsepower, Auto))
plot(lm(Auto$mpg~Auto$horsepower, Auto))
ablin(lm(Auto$mpg~Auto$horsepower, Auto))
abline(lm(Auto$mpg~Auto$horsepower, Auto))
lm(Auto$mpg~Auto$horsepower, Auto)
abline(lm(Auto$mpg~Auto$horsepower, Auto))
reg <- lm(Auto$mpg~Auto$horsepower,data = Auto)
coefficients(reg)
abline(reg, col="blue")
plot(mpg~horsepower, ,pch =20)
plot(Auto$mpg~Auto$horsepower, ,pch =20)
abline (lm.fit.result ,lwd =3, col ="red")
reg <- lm(Auto$mpg~Auto$horsepower,data = Auto)
abline (reg  ,lwd =3, col ="red")
summary(reg)
abline ((2,1)  ,lwd =3, col ="red")
abline(v=c(15,20), col=c("blue", "red"), lty=c(1,2), lwd=c(1, 3))
abline(v=c(15,20), col=c("blue", "red"), lty=c(1,2), lwd=c(1, 3))
abline(v = mean(mydata), col="red", lwd=3, lty=2)
mydata<-rnorm(200)
abline(v = mean(mydata), col="red", lwd=3, lty=2)
abline(v = mean(mydata), col="red", lwd=3, lty=2)
abline(v = mean(mydata), col="red", lwd=3, lty=2)
abline(v = mean(mydata), col="red", lwd=3, lty=2)
abline(v = mean(mydata), col="red", lwd=3, lty=2)
abline(v = mean(mydata), col="red", lwd=3, lty=2)
abline(v = mean(mydata), col="red", lwd=3, lty=2)
plot(cars)
abline(v = mean(mydata), col="red", lwd=3, lty=2)
abline(v = mean(mydata), col="red", lwd=3, lty=2)
abline(v = mean(mydata), col="red", lwd=3, lty=2)
abline(v = mean(mydata), col="red", lwd=3, lty=2)
plot(cars)
plot(Auto$mpg~Auto$horsepower, ,pch =20)
abline (reg  ,lwd =3, col ="red")
plot(predict (reg), residuals (reg))
plot(predict (reg), rstudent (reg))
par(mfrow=c(2,2))
par(mfrow=c(2,2))
plot(lm.fit)
plot(reg)
install.packages('corrplot')
install.packages('corrplot')
library('corrplot’)
par(mfrow=c(1,1))
corrplot(cor.obj, method = "number")
c
data
data
data
data
data
data
dsad
fdasfa
corrplot(cor.obj, method = "number")
library('corrplot’)
library(corrplot)
corrplot(cor.obj, method = "number")
par(mfrow=c(1,1))
corrplot(cor.obj, method = "number")
cor(Auto$mpg, Auto$horsepower)
cor(Auto$mpg)
cor(Auto$mpg, Auto$horsepower)
Input = "C:/Repositories/final project/data/"
load(paste0(Input,"mat.f.coding.RData"), verbose = "TRUE")
load(paste0(Input,"pheno.f.RData"), verbose = "TRUE")
ts.list = as.character(unique(pheno.f$SMTSD))
print(ts.list[53])
get.raw.tissue.edata<-function(tissue.name, mat.f.coding, pheno.f){
tiss.cols.1 = which(pheno.f$SMTSD %in% tissue.name)
mat.1 = mat.f.coding[, tiss.cols.1]
return(mat.1)
}
i = 53
tmp.tissue = ts.list[i]
print(paste0("loading ", tmp.tissue, " edata"))
reads.src1 = get.raw.tissue.edata(tmp.tissue, mat.f.coding, pheno.f)
t.reads.src = t(reads.src1)
#delete genes with low values - with 80% of expression is 0.1.
vec.1 = apply(reads.src1 , 1, function(x) length(which( x > log(0.1+1, 2) )))
row.index = which(vec.1 > (0.8*(ncol(reads.src1 ))))
# leave just rows with expression per at least 80% of the samples
src.reads = reads.src1 [row.index, ]
#delete genes with variance = 0
var.data <- apply(src.reads, 1, var) #generate variance of each row - gene
low.var.indxs = which(var.data == 0)
if(length(low.var.indxs) > 0)
{
data.free = src.reads
#now we get smaller matrix, with no genes with variance 0
src.reads <- data.free[-low.var.indxs,]
}
install.packages("BiocManager")
BiocManager::install("WGCNA")
Input = "C:/Repositories/final project/data/"
load(paste0(Input,"mat.f.coding.RData"), verbose = "TRUE")
load(paste0(Input,"pheno.f.RData"), verbose = "TRUE")
ts.list = as.character(unique(pheno.f$SMTSD))
print(ts.list[53])
get.raw.tissue.edata<-function(tissue.name, mat.f.coding, pheno.f){
tiss.cols.1 = which(pheno.f$SMTSD %in% tissue.name)
mat.1 = mat.f.coding[, tiss.cols.1]
return(mat.1)
}
i = 53
tmp.tissue = ts.list[i]
print(paste0("loading ", tmp.tissue, " edata"))
reads.src1 = get.raw.tissue.edata(tmp.tissue, mat.f.coding, pheno.f)
t.reads.src = t(reads.src1)
#delete genes with low values - with 80% of expression is 0.1.
vec.1 = apply(reads.src1 , 1, function(x) length(which( x > log(0.1+1, 2) )))
row.index = which(vec.1 > (0.8*(ncol(reads.src1 ))))
# leave just rows with expression per at least 80% of the samples
src.reads = reads.src1 [row.index, ]
#delete genes with variance = 0
var.data <- apply(src.reads, 1, var) #generate variance of each row - gene
low.var.indxs = which(var.data == 0)
if(length(low.var.indxs) > 0)
{
data.free = src.reads
#now we get smaller matrix, with no genes with variance 0
src.reads <- data.free[-low.var.indxs,]
}
install.packages("BiocManager")
BiocManager::install("WGCNA")
Input = "C:/Repositories/final project/data/"
load(paste0(Input,"mat.f.coding.RData"), verbose = "TRUE")
load(paste0(Input,"pheno.f.RData"), verbose = "TRUE")
ts.list = as.character(unique(pheno.f$SMTSD))
print(ts.list[53])
get.raw.tissue.edata<-function(tissue.name, mat.f.coding, pheno.f){
tiss.cols.1 = which(pheno.f$SMTSD %in% tissue.name)
mat.1 = mat.f.coding[, tiss.cols.1]
return(mat.1)
}
i = 53
tmp.tissue = ts.list[i]
print(paste0("loading ", tmp.tissue, " edata"))
reads.src1 = get.raw.tissue.edata(tmp.tissue, mat.f.coding, pheno.f)
t.reads.src = t(reads.src1)
#delete genes with low values - with 80% of expression is 0.1.
vec.1 = apply(reads.src1 , 1, function(x) length(which( x > log(0.1+1, 2) )))
row.index = which(vec.1 > (0.8*(ncol(reads.src1 ))))
# leave just rows with expression per at least 80% of the samples
src.reads = reads.src1 [row.index, ]
#delete genes with variance = 0
var.data <- apply(src.reads, 1, var) #generate variance of each row - gene
low.var.indxs = which(var.data == 0)
if(length(low.var.indxs) > 0)
{
data.free = src.reads
#now we get smaller matrix, with no genes with variance 0
src.reads <- data.free[-low.var.indxs,]
}
install.packages("BiocManager")
BiocManager::install("WGCNA")
remove.outliers.with.SD<-function(t.reads.src)
{
#remove outliers
#cluster the samples and not the genes to find outliers
A = adjacency(t(t.reads.src), type = "distance")
#the connectivity of each human. -1 is to remove the diagonal, the cor to itself
k = as.numeric(apply(A,2,sum))-1
Z.k = scale(k) #standardized k
thresholdZ.k = -3 #standard deviation
outlierColor = ifelse(Z.k<thresholdZ.k,"red","black")#the red is the outlier
my.outliers = which(outlierColor == "red")
#printing the outlier samples
my.outliers.samp = (rownames(t.reads.src))[my.outliers]
print("outlier samples to remove")
print(my.outliers.samp)
my.good.samples = which(outlierColor == "black")
my.good.samples.names = (rownames(t.reads.src))[my.good.samples]
#printing the outlier samples
#print(my.good.samples.names)
#this is the final mat after outliers removal
t.reads.src = t.reads.src[my.good.samples.names, ]
return(t.reads.src)
}
t.reads.src = remove.outliers.with.SD(t(src.reads))
Input = "C:/Repositories/final project/data/"
load(paste0(Input,"mat.f.coding.RData"), verbose = "TRUE")
load(paste0(Input,"pheno.f.RData"), verbose = "TRUE")
ts.list = as.character(unique(pheno.f$SMTSD))
print(ts.list[53])
get.raw.tissue.edata<-function(tissue.name, mat.f.coding, pheno.f){
tiss.cols.1 = which(pheno.f$SMTSD %in% tissue.name)
mat.1 = mat.f.coding[, tiss.cols.1]
return(mat.1)
}
i = 53
tmp.tissue = ts.list[i]
print(paste0("loading ", tmp.tissue, " edata"))
reads.src1 = get.raw.tissue.edata(tmp.tissue, mat.f.coding, pheno.f)
t.reads.src = t(reads.src1)
#delete genes with low values - with 80% of expression is 0.1.
vec.1 = apply(reads.src1 , 1, function(x) length(which( x > log(0.1+1, 2) )))
row.index = which(vec.1 > (0.8*(ncol(reads.src1 ))))
# leave just rows with expression per at least 80% of the samples
src.reads = reads.src1 [row.index, ]
#delete genes with variance = 0
var.data <- apply(src.reads, 1, var) #generate variance of each row - gene
low.var.indxs = which(var.data == 0)
if(length(low.var.indxs) > 0)
{
data.free = src.reads
#now we get smaller matrix, with no genes with variance 0
src.reads <- data.free[-low.var.indxs,]
}
install.packages("BiocManager")
BiocManager::install("WGCNA")
library('igraph');
install.packages("BiocManager")
BiocManager::install("WGCNA")
install.packages("igraph")
library('igraph');
remove.outliers.with.SD<-function(t.reads.src)
{
#remove outliers
#cluster the samples and not the genes to find outliers
A = adjacency(t(t.reads.src), type = "distance")
#the connectivity of each human. -1 is to remove the diagonal, the cor to itself
k = as.numeric(apply(A,2,sum))-1
Z.k = scale(k) #standardized k
thresholdZ.k = -3 #standard deviation
outlierColor = ifelse(Z.k<thresholdZ.k,"red","black")#the red is the outlier
my.outliers = which(outlierColor == "red")
#printing the outlier samples
my.outliers.samp = (rownames(t.reads.src))[my.outliers]
print("outlier samples to remove")
print(my.outliers.samp)
my.good.samples = which(outlierColor == "black")
my.good.samples.names = (rownames(t.reads.src))[my.good.samples]
#printing the outlier samples
#print(my.good.samples.names)
#this is the final mat after outliers removal
t.reads.src = t.reads.src[my.good.samples.names, ]
return(t.reads.src)
}
t.reads.src = remove.outliers.with.SD(t(src.reads))
View(LoadLibraries)
View(LoadLibraries)
View(LoadLibraries)
View(LoadLibraries)
View(LoadLibraries)
View(LoadLibraries)
Input = "C:/Repositories/final project/data/"
load(paste0(Input,"mat.f.coding.RData"), verbose = "TRUE")
load(paste0(Input,"pheno.f.RData"), verbose = "TRUE")
ts.list = as.character(unique(pheno.f$SMTSD))
print(ts.list[53])
get.raw.tissue.edata<-function(tissue.name, mat.f.coding, pheno.f){
tiss.cols.1 = which(pheno.f$SMTSD %in% tissue.name)
mat.1 = mat.f.coding[, tiss.cols.1]
return(mat.1)
}
i = 53
tmp.tissue = ts.list[i]
print(paste0("loading ", tmp.tissue, " edata"))
reads.src1 = get.raw.tissue.edata(tmp.tissue, mat.f.coding, pheno.f)
t.reads.src = t(reads.src1)
#delete genes with low values - with 80% of expression is 0.1.
vec.1 = apply(reads.src1 , 1, function(x) length(which( x > log(0.1+1, 2) )))
row.index = which(vec.1 > (0.8*(ncol(reads.src1 ))))
# leave just rows with expression per at least 80% of the samples
src.reads = reads.src1 [row.index, ]
#delete genes with variance = 0
var.data <- apply(src.reads, 1, var) #generate variance of each row - gene
low.var.indxs = which(var.data == 0)
if(length(low.var.indxs) > 0)
{
data.free = src.reads
#now we get smaller matrix, with no genes with variance 0
src.reads <- data.free[-low.var.indxs,]
}
#install.packages("BiocManager")
BiocManager::install("WGCNA")
library('WGCNA');
#install.packages("BiocManager")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel","fastcluster", "dynamicTreeCut", "survival", "BiocManager")
BiocManager::install(c("GO.db", "preprocessCore", "impute"));
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel","fastcluster", "dynamicTreeCut", "survival", "BiocManager")
;
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel","fastcluster", "dynamicTreeCut", "survival", "BiocManager")
q
